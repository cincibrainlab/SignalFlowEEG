[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SignalFlow EEG",
    "section": "",
    "text": "Welcome\nSignalFlowEEG (SF) is a comprehensive and versatile framework designed to streamline the processing of Electroencephalograms (EEG). Utilizing an array of different pipelines, SF aims to ensure reproducibility and consistency across EEG studies.\nThe overarching objective of SF is to generate robust data tables that facilitate summary generation and statistical analysis. These tables can encompass a wide range of EEG features, from intrinsic characteristics to preprocessing steps and sophisticated analysis."
  },
  {
    "objectID": "index.html#core-features",
    "href": "index.html#core-features",
    "title": "SignalFlow EEG",
    "section": "Core Features",
    "text": "Core Features\n\nFocus on Data Tables: SignalFlowEEG generates tables encapsulating diverse aspects of EEG research, including EEG characteristics, preprocessing procedures, and comprehensive analysis.\nEEGLAB SET Format Compatibility: SF employs the universally accepted EEGLAB SET format, providing an efficient data structure for EEG processing and encouraging interoperability with other tools.\nAudit Capabilities: To maintain transparency and accountability, SF provides the ability to perform audits on logged actions. This feature allows researchers to trace back and review the sequence of operations applied on the EEG data.\nHigh-Performance File Formats: For handling high-dimensional data such as connectivity matrices, SignalFlowEEG adopts high-performance file formats like Apache Parquet. This approach not only ensures data integrity but also facilitates speedy retrieval and efficient storage."
  },
  {
    "objectID": "book/revision/sf_lets-get-started.html#signalflow-in-a-nutshell",
    "href": "book/revision/sf_lets-get-started.html#signalflow-in-a-nutshell",
    "title": "Let’s Get Started",
    "section": "SignalFlow in a Nutshell",
    "text": "SignalFlow in a Nutshell\nAt it’s essense, SignalFlow is a MATLAB toolbox and provides a unified wrapper around opensource EEG toolkits (e.g., EEGLAB, FieldTrip, MNE, etc.) to process data and generate uniform outputs (tables and figures). Signalflow can handle EEG data from human recordings but also from other signal sources such as ?sec-mouse-eeg.\nThis flexibility should allow you to chose the best toolkit for a specific task, while still providing uniform outputs that can be analyzed similarly."
  },
  {
    "objectID": "book/revision/sf_lets-get-started.html#an-brief-example-workflow",
    "href": "book/revision/sf_lets-get-started.html#an-brief-example-workflow",
    "title": "Let’s Get Started",
    "section": "An Brief Example Workflow",
    "text": "An Brief Example Workflow\nLet’s give a prototype example of a SignalFlow workflow that might be difficult in any single EEG toolkit.\n\nMATLAB: Use the EEGLAB import functions to properly import an Magstim/EGI .mff file.\nMATLAB: Use a visual pipeline to preprocess several subjects using EEGLAB’s preprocessing functions including using Artifact Subspace Reconstruction (ASR) to remove artifacts.\nMATLAB: Use an optimized parallel ICA function to run ICA on all subjects in parallel using a custom ICA binary that is optimized for your operating system.\nMATLAB: Following preprocessing, use EEGLAB to save the files as SET files in a BIDS compatible format and save preprocessing details as a CSV file.\nUse the artifact-free SET to perform analyzses across toolkits but create R-statistics (CSV) compatible tables.\n\nUse MATLAB to generate band power tables\nUse Python to generate connectivity tables\nUse R to import the tables and run statistics and perform visualization.\n\n\nWe will go through variations of this workflow in the following sections to give a broad overview of the capabilities of SignalFlow."
  },
  {
    "objectID": "book/revision/sf_installing_signalflow.html#overview",
    "href": "book/revision/sf_installing_signalflow.html#overview",
    "title": "1  Installing SignalFlow",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nThe source code for SignalFlow is hosted on GitHub. There are two primary methods to install SignalFlow:\n\nUsing Git software to directly download the code\nDownloading the code as a zip file from the GitHub website\n\nHowever, due to the inclusion of submodules pertaining to other necessary programs, we highly recommend the use of Git for downloading SignalFlow. The direct web download approach requires manual downloading and arrangement of each piece of software within the source code directory, which could prove to be a more time-consuming process."
  },
  {
    "objectID": "book/revision/sf_installing_signalflow.html#method-1-using-git",
    "href": "book/revision/sf_installing_signalflow.html#method-1-using-git",
    "title": "1  Installing SignalFlow",
    "section": "1.2 Method 1: Using Git",
    "text": "1.2 Method 1: Using Git\n\nCheck if Git is installed:\nOpen a terminal or command prompt and run the following command:\ngit --version\nIf Git is installed, you will see the version number. If not, proceed to the next step.\nInstall Git:\nDownload the install from the official Git website for your operating system at official Git website.\nCreate a ‘github’ directory: Choose a location on your drive that will be used to store your toolboxes.\nRun use your file explorer or run following command to create a new directory called ‘github’ and navigate to it:\nmkdir github\ncd github\nClone the SignalFlow repository with submodules:\nRun the following command to clone the repository and its submodules:\ngit clone --recurse-submodules https://github.com/cincibrainlab/SignalFlowEEG_HBCD.git\nThis will clone the repository and its submodules into the ‘github’ directory. The output will be displayed in the terminal or command prompt.\nClone other necessary toolkits: In addition to SignalFlowEEG, you may need to clone several other toolkits. Here are the necessary commands:\n\n\nEEGLAB:\ngit clone --recurse-submodules https://github.com/sccn/eeglab.git\nBrainstorm:\ngit clone --recurse-submodules https://github.com/brainstorm-tools/brainstorm3.git\nHAPPE Pipeline:\ngit clone --recurse-submodules https://github.com/PINE-Lab/HAPPE.git\nMADE Pipeline:\ngit clone --recurse-submodules https://github.com/ChildDevLab/MADE-EEG-preprocessing-pipeline.git\nAfter cloning these repositories, you’ll have all the necessary toolkits for your EEG data analysis. Make sure to keep these repositories up-to-date by pulling the latest changes regularly by using the command:\ngit pull --recurse-submodules"
  },
  {
    "objectID": "book/revision/sf_installing_signalflow.html#method-2-downloading-toolkits-as-zip-files",
    "href": "book/revision/sf_installing_signalflow.html#method-2-downloading-toolkits-as-zip-files",
    "title": "1  Installing SignalFlow",
    "section": "1.3 Method 2: Downloading Toolkits as Zip Files",
    "text": "1.3 Method 2: Downloading Toolkits as Zip Files\nIf you prefer, you can download each repository individually as a zip file. This can be done from the main page of each repository on GitHub. Note that this method will require additional steps to organize the downloaded content.\nHere are the steps to download and organize the repositories:\n\nNavigate to each repository’s GitHub page in your web browser.\nClick on the Code button and then click Download ZIP.\nOnce the download is complete, extract the ZIP file.\nCreate a new folder in your github directory for each extracted repository. The name of the folder should match the repository name.\n\nHere are the links to each repository: - SignalFlow: https://github.com/cincibrainlab/SignalFlowEEG_HBCD.git - VHTP: https://github.com/cincibrainlab/vhtp - VHTP Dependencies: https://github.com/cincibrainlab/vhtp_dependencies - HAPPE Pipeline: https://github.com/PINE-Lab/HAPPE - MADE Pipeline: https://github.com/ChildDevLab/MADE-EEG-preprocessing-pipeline\nNote: For the VHTP and VHTP Dependencies, make sure to place these folders in the SignalFlowEEG_HBCD folder, as they are necessary for certain SignalFlow operations.\nEEGLAB and Brainstorm must be downloaded through their respective non-github websites. This is because any submodules cannot be downloaded through the github website without git.\n\nEEGLAB: https://sccn.ucsd.edu/eeglab/index.php\nBrainstorm:https://neuroimage.usc.edu/brainstorm/Introduction\n\nAfter extraction, you will have the complete repository with all its files and folders available on your computer."
  },
  {
    "objectID": "book/revision/sf_organizing_files.html#overview",
    "href": "book/revision/sf_organizing_files.html#overview",
    "title": "2  Preparing Data Files",
    "section": "2.1 Overview",
    "text": "2.1 Overview\nWhen working with complex data like EEG datasets, a clear and concise directory structure is essential for efficient data management and processing. A well-organized file structure improves reproducibility and ease of understanding for others (and your future self).\nConsidering the diverse storage requirements of different processes, we suggest splitting up your directories to increase versatility. Our recommendation includes creating three main directories: data, temp, and results.\nThese directories should be nested within a project-specific folder to separate and manage multiple projects effortlessly. We also advise creating a readme.txt file in the main folder and describing the contents and purpose of the project and folders.\nHere’s a simple, recommended structure:\n\nProjectName/\n\nreadme.txt\ndata/\ntemp/\nresults/\n\n\nThe data directory should contain all the raw data that will be processed. The temp directory will store any temporary files created during data processing, and the results directory will hold the output from your analyses."
  },
  {
    "objectID": "book/revision/sf_organizing_files.html#using-the-bids-format",
    "href": "book/revision/sf_organizing_files.html#using-the-bids-format",
    "title": "2  Preparing Data Files",
    "section": "2.2 Using the BIDS format",
    "text": "2.2 Using the BIDS format\nThe Brain Imaging Data Structure (BIDS) is a formal way to name and organize neuroimaging data and metadata in a file system. The goal is to simplify communication and collaboration among users. The format enables easier data validation and software development through consistent paths and naming for data files.\nSignalFlow does not require the use of BIDS, but it maybe useful for certain projects. You can incorporate the BIDS structure into the project organization strategy described above by placing a BIDS-compliant data folder inside the data directory.\n- ProjectName/\n  - readme.txt\n  - data/\n    - BIDS/\n      - sub-01/\n        - ses-01/\n          - eeg/\n            - sub-01_ses-01_task-mytask_eeg.edf\n            - sub-01_ses-01_task-mytask_channels.tsv\n            - sub-01_ses-01_task-mytask_electrodes.tsv\n            - sub-01_ses-01_task-mytask_events.tsv\n            - ...\n      - ...\n  - temp/\n  - results/\nSignalFlow relies on helper functions from the Cincinnati Visual High Throughput Pipeline (vHTP). The standard file list utility (util_htpDirListing.m) can create a custom file list from a BIDS directory structure.\nRemember, a well-planned and maintained directory structure can save time and prevent confusion as your project grows."
  },
  {
    "objectID": "book/revision/sf_starting_signalflow.html",
    "href": "book/revision/sf_starting_signalflow.html",
    "title": "3  Starting SignalFlow",
    "section": "",
    "text": "Follow the steps below to launch the SignalFlow graphical user interface (GUI) or APplication via MATLAB:\n\nOpen MATLAB.\nLaunch the MATLAB software from your applications menu or desktop shortcut.\nNavigate to the SignalFlow Directory.\nThe SignalFlow directory is typically located within the GitHub folder in your Documents. This might vary depending on where you cloned the repository. The paths are generally as follows:\n\nFor Windows: C:\\\\Users\\\\**YourUsername**\\\\Documents\\\\github\\\\SignalFlow_HBCD\nFor Linux or macOS: /home/**YourUsername**/Documents/github/SignalFlow_HBCD\n\nReplace **YourUsername** with your actual username on your computer.\nTo navigate to this directory in MATLAB, you can use the cd (change directory) command in MATLAB’s Command Window:\ncd('path-to-directory')\nReplace 'path-to-directory' with the appropriate path above.\nFind the SignalFlow application file.\nIn MATLAB’s Current Folder pane (typically located on the left side of the interface), scroll to locate the SignalFlow application file named “SignalFlowEEG.mlapp”.\nRun the SignalFlow application. \nRight-click on the “SignalFlowEEG.mlapp” file and select “Run” from the context menu.\nCheck SignalFlow Application.\n\nThe SignalFlow Application should now open. If the GUI does not open or you encounter an error, ensure that you have the correct directory and the “SignalFlowEEG.mlapp” file is present.\nCheck dependencies\n\nIf you check the command window, you will see that SignalFlow will do a careful check for any missing dependencies. If you encounter any errors, revist the Chapter 1 section to ensure that you have installed all the necessary dependencies.\nThe command SignalFlowDoctor will do a careful check for missing toolkits and also have options for repair. Restart SignalFlow after installing any missing dependencies.\n\n\n\nSignalFlowDoctor\n\n\nIn this case, SignalFlowDoctor identifies two issues as missing EEGLAB toolkits. Running the recommended commands in the command window will install the missing toolkits. If a plugin cannot be installed automatically, you may need to open EEGLAB and install it though the plugin manager.\nWith these steps, you should be able to successfully launch the SignalFlow EEG Application in MATLAB."
  },
  {
    "objectID": "book/revision/sf_setup_tab.html#adding-toolboxes-to-the-matlab-path",
    "href": "book/revision/sf_setup_tab.html#adding-toolboxes-to-the-matlab-path",
    "title": "4  SignalFlow: Setup Tab",
    "section": "4.1 Adding toolboxes to the MATLAB path",
    "text": "4.1 Adding toolboxes to the MATLAB path\n\nNavigate to the “Setup” Tab.\nDecide which toolbox/dependency you would like to add to the MATLAB path. A. A Red circle indicated the toolbox/dependency has not been added. B. A Green circle indicates that the toolbox/dependency has been added.\nLeft-click on the “Click to Fix: Insert Toolbox”.\nFile Explorer will open.\nSelect the directory that contains your toolbox. Click “Open” in the file explorer. A. This can vary based on the toolbox, contact us if you have issues .\nThe circle should turn from red to green, may take a second due to SignalFLow checking if it’s the right toolbox."
  },
  {
    "objectID": "book/revision/sf_setup_tab.html#adding-project-folder-locations",
    "href": "book/revision/sf_setup_tab.html#adding-project-folder-locations",
    "title": "4  SignalFlow: Setup Tab",
    "section": "4.2 Adding Project Folder locations",
    "text": "4.2 Adding Project Folder locations\n\nNavigate to the “Setup” Tab.\nDecide which folder you would like to add. A. A Red circle indicated the folder has not been added. B. A Green circle indicates that the folder has been added.\nLeft-click on the “Click to Fix: Insert folder”.\nFile Explorer will open.\nSelect the directory you would like to add. Left-click “Open” in the file explorer.\nThe circle will turn from red to green."
  },
  {
    "objectID": "book/revision/sf_setup_tab.html#adding-custom-projct-folder-locations",
    "href": "book/revision/sf_setup_tab.html#adding-custom-projct-folder-locations",
    "title": "4  SignalFlow: Setup Tab",
    "section": "4.3 Adding Custom Projct Folder locations",
    "text": "4.3 Adding Custom Projct Folder locations\n\nNavigate to the “Setup” Tab.\nLeft-click the “Add Custom Folder” button.\nA Matlab figure will open.\nLeft-click the “Select Directory” button.\nSelect the directory you would like to add. Left-click “Open” in the file explorer.\nEnter a tag. A tag is an easily recognizable name used for selecting this Projct Folder later.\nLeft-click the “Confirm” button.\nA new project foler will be added. The circle will turn from red to green."
  },
  {
    "objectID": "book/revision/sf_setup_tab.html#edit-project-information",
    "href": "book/revision/sf_setup_tab.html#edit-project-information",
    "title": "4  SignalFlow: Setup Tab",
    "section": "4.4 Edit Project Information",
    "text": "4.4 Edit Project Information\n\nNavigate to the “Setup” Tab.\nEnter a Title for your project.\nEnter a Description for you project.\nEnter an Author for your project.\nLeft-click the “Save” button."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#filter-modules",
    "href": "book/revision/sf_builder_tab.html#filter-modules",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.1 Filter Modules",
    "text": "5.1 Filter Modules\n\nNavigate to the “Builder” Tab.\nLeft-click the filter dropdown.\nSelect the filter you would like to use.\nModule Libraries will only show modules that agree with your filter."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#sec-AddingModules",
    "href": "book/revision/sf_builder_tab.html#sec-AddingModules",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.2 Adding Modules",
    "text": "5.2 Adding Modules\n\nNavigate to the “Builder” Tab.\nLeft-click the module you would like to use.\n\nThis can be from the both the Base and User module libraries.\n\nBelow the Base and User module libraries, there is an “Add Module” button, left-click it.\nThe module will the be added to the pipeline. It will show up in the Pipeline Builder."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#copy-and-edit-module-todo-this-might-have-a-bug",
    "href": "book/revision/sf_builder_tab.html#copy-and-edit-module-todo-this-might-have-a-bug",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.3 Copy and Edit Module TODO this might have a bug",
    "text": "5.3 Copy and Edit Module TODO this might have a bug\n\nNavigate to the “Builder” Tab.\nLeft-click the module you would like to use.\n\nThis can be from the both the Base and User module libraries.\n\nBelow the Base and User module libraries, there is an “Add Module” button, left-click it.\nThe module will then be opened in Matlab.\nEdit any parameters or code.\nSave the Module file.\nThe Module file should show up in the User module library."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#delete-module",
    "href": "book/revision/sf_builder_tab.html#delete-module",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.4 Delete Module",
    "text": "5.4 Delete Module\n\nNavigate to the “Builder” Tab.\nLeft-click the module you would like to delete.\n\nThis can only be from the Pipeline Builder\n\nBelow the Pipeline Builder, there is an “Delete Module” button, left-click it.\nThe Module will be removed from the pipeline."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#reorder-modules",
    "href": "book/revision/sf_builder_tab.html#reorder-modules",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.5 Reorder Modules",
    "text": "5.5 Reorder Modules\n\nNavigate to the “Builder” Tab.\nLeft-click the module you would like to reorder.\n\nThis can only be from the Pipeline Builder.\n\nTo the right of the Pipeline Builder, there are 2 arrows.\nLeft-click the arrow that corresponds with the direction you would like to move the module.\nThe Module will be reordered in the pipeline."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#reset-pipeline",
    "href": "book/revision/sf_builder_tab.html#reset-pipeline",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.6 Reset Pipeline",
    "text": "5.6 Reset Pipeline\n\nNavigate to the “Builder” Tab.\nLeft-click the “Reset Pipeline” button.\nAll Modules within the Pipeline Builder will be deleted."
  },
  {
    "objectID": "book/revision/sf_builder_tab.html#change-module-information",
    "href": "book/revision/sf_builder_tab.html#change-module-information",
    "title": "5  SignalFlow: Builder Tab",
    "section": "5.7 Change Module Information",
    "text": "5.7 Change Module Information\n\nNavigate to the “Builder” Tab.\nEnter the new Module Name.\nIf the module is an outflow module. A. Select the needed output folder tag in the dropdown.\nLeft-click the “Update” button.\nYour changes will be saved.\nIf you would like to return to default name and folder tag A. Left-click the “Default” button."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#refresh",
    "href": "book/revision/sf_execute_tab.html#refresh",
    "title": "6  Execute Tab",
    "section": "6.1 Refresh",
    "text": "6.1 Refresh\n\nThis button is used to refresh the workflow status and file catalog when a change to the file sytem or pipeline has occured.\n\nAn example of this would be adding a file to the import directory. The user must click the “Refresh” button in order to see it in the File Catalog."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#execute-loop",
    "href": "book/revision/sf_execute_tab.html#execute-loop",
    "title": "6  Execute Tab",
    "section": "6.2 Execute (Loop)",
    "text": "6.2 Execute (Loop)\n\nThis button is used to execute the pipeline on all eeg files in the import directory. These will be done one at a time.\nUse this if there are steps that require user input. A. Examples of this include: Remove channels, remove epochs, etc."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#execute-parallel",
    "href": "book/revision/sf_execute_tab.html#execute-parallel",
    "title": "6  Execute Tab",
    "section": "6.3 Execute (Parallel)",
    "text": "6.3 Execute (Parallel)\n\nThis button is used to execute the pipeline on all eeg files in the import directory. These will be done all at the same time.\nThis should only be used when the follwoing are true. A. Use this if there are no steps that require user input. Examples of this include: Remove channels, remove epochs, etc. B. You have a high performance computer. C. The pipeline takes longer than 1 minutes to run on a single eeg file. The setup and tear down of workers may take some time. inefficient use could make the processing time longer. D. You have the Matlab Parralel Processing Toolbox"
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#execute-file",
    "href": "book/revision/sf_execute_tab.html#execute-file",
    "title": "6  Execute Tab",
    "section": "6.4 Execute (File)",
    "text": "6.4 Execute (File)\n\nThis button is used to execute the pipeline on a selected eeg file in the import directory.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “Execute (File)” button."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#open-import-folder",
    "href": "book/revision/sf_execute_tab.html#open-import-folder",
    "title": "6  Execute Tab",
    "section": "6.5 Open Import Folder",
    "text": "6.5 Open Import Folder\n\nThis button is used to open the import directory in the computers file explorer."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#open-export-folder",
    "href": "book/revision/sf_execute_tab.html#open-export-folder",
    "title": "6  Execute Tab",
    "section": "6.6 Open Export Folder",
    "text": "6.6 Open Export Folder\n\nThis button is used to open the selected directory in the computers file explorer.\nTo use this button:\n\nLeft-click your desired directory in the File Catalog.\nLeft-click the “Open Export Folder” button."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#open-in-eeglab",
    "href": "book/revision/sf_execute_tab.html#open-in-eeglab",
    "title": "6  Execute Tab",
    "section": "6.7 Open in EEGLAB",
    "text": "6.7 Open in EEGLAB\n\nThis button is used to open a selected eeg file in the EEGLAB gui.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “Open in EEGLAB” button."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#plot-data",
    "href": "book/revision/sf_execute_tab.html#plot-data",
    "title": "6  Execute Tab",
    "section": "6.8 Plot Data",
    "text": "6.8 Plot Data\n\nThis button is used to plot data for a selected eeg file.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “Plot Data” button."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#view-electrode-map",
    "href": "book/revision/sf_execute_tab.html#view-electrode-map",
    "title": "6  Execute Tab",
    "section": "6.9 View Electrode Map",
    "text": "6.9 View Electrode Map\n\nThis button is used to view the electrode map for a selected eeg file.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “View Electrode Map” button."
  },
  {
    "objectID": "book/revision/sf_execute_tab.html#view-channel-spectra",
    "href": "book/revision/sf_execute_tab.html#view-channel-spectra",
    "title": "6  Execute Tab",
    "section": "6.10 View Channel Spectra",
    "text": "6.10 View Channel Spectra\n\nThis button is used to view the channel spectra for a selected eeg file.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “View Channel Spectra” button."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#select-project-folder",
    "href": "book/revision/sf_browse_tab.html#select-project-folder",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.1 Select Project Folder",
    "text": "7.1 Select Project Folder\n\nNavigate to the “Browse” Tab.\nLeft-click the current folder dropdown.\nSelect the folder you would like to see.\nThe file catalog will be updated based on your selection."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#refresh",
    "href": "book/revision/sf_browse_tab.html#refresh",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.2 Refresh",
    "text": "7.2 Refresh\n\nThis button is used to refresh the file catalog when a change to the file sytem or pipeline has occured.\n\nAn example of this would be adding a file to the import directory. The user must click the “Refresh” button in order to see it in the File Catalog."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#open-selected-folder",
    "href": "book/revision/sf_browse_tab.html#open-selected-folder",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.3 Open Selected Folder",
    "text": "7.3 Open Selected Folder\n\nThis button is used to open the selected directory in the computers file explorer.\nTo use this button:\n\nLeft-click your desired directory in the File Catalog.\nLeft-click the “Open Export Folder” button."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#open-in-eeglab",
    "href": "book/revision/sf_browse_tab.html#open-in-eeglab",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.4 Open in EEGLAB",
    "text": "7.4 Open in EEGLAB\n\nThis button is used to open a selected eeg file in the EEGLAB gui.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “Open in EEGLAB” button."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#plot-data",
    "href": "book/revision/sf_browse_tab.html#plot-data",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.5 Plot Data",
    "text": "7.5 Plot Data\n\nThis button is used to plot data for a selected eeg file.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “Plot Data” button."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#view-electrode-map",
    "href": "book/revision/sf_browse_tab.html#view-electrode-map",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.6 View Electrode Map",
    "text": "7.6 View Electrode Map\n\nThis button is used to view the electrode map for a selected eeg file.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “View Electrode Map” button."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#view-channel-spectra",
    "href": "book/revision/sf_browse_tab.html#view-channel-spectra",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.7 View Channel Spectra",
    "text": "7.7 View Channel Spectra\n\nThis button is used to view the channel spectra for a selected eeg file.\nTo use this button:\n\nLeft-click your desired file in the File Catalog.\nLeft-click the “View Channel Spectra” button."
  },
  {
    "objectID": "book/revision/sf_browse_tab.html#close-windows",
    "href": "book/revision/sf_browse_tab.html#close-windows",
    "title": "7  SignalFlow: Browse Tab",
    "section": "7.8 Close Windows",
    "text": "7.8 Close Windows\n\nThis button is used to close all matlab figures/windows. Matlab and the SignalFlowEEG GUi will not be closed."
  },
  {
    "objectID": "book/murine-eeg/mouseeeg-tutorial.html#sec-overview",
    "href": "book/murine-eeg/mouseeeg-tutorial.html#sec-overview",
    "title": "8  Mouse EEG Tutorial",
    "section": "8.1 Overview",
    "text": "8.1 Overview\nThis tutorial assumes that you have already installed SignalFlowEEG (Chapter 1) and are familiar with the SignalFlow interface (Chapter 4).\nDuring this tutorial we will calculate spectral power and run a connectivity analysis."
  },
  {
    "objectID": "book/murine-eeg/mouseeeg-tutorial.html#sec-loadingdata",
    "href": "book/murine-eeg/mouseeeg-tutorial.html#sec-loadingdata",
    "title": "8  Mouse EEG Tutorial",
    "section": "8.2 Loading Data",
    "text": "8.2 Loading Data\n\nCreate a new project folder in your filesystem to store the data and analysis results. For example, ~/Documents/mouseEEG.\nCreate three subfolders in the project folder: ‘import’, ‘temp’, and ‘results’.\nOn the SignalFlow GUI select the ‘Setup’ tab and setup your project folders by assigning them to each of the three folders you just created.\n\n\n\n\nSetup Folders\n\n\n\nLet’s import our mouse EEG files. In this example, we will be assuming you have already preprocessed the data into SET format. We will use the import tool to copy over the SET files to our project folder.\n\nSelect “Open the VHTP Import Tool” button underneath the Setup Project Folders pane:\n\n\n\nSetup Folders\n\n\n\nThe vHTP import tool is a multipurpose utility to import data from a variety of formats into EEGLAB SET format. It also can copy SET files directly. The Import tool has the ability to select SET files across subfolders and perform keyword filtering which has advantages compared to a manual file copy.\n\nPlease refer to the vHTP import tool documentation and follow the instructions for copy SET files to your project folder (Example Workflow 2).\nLink to vHTP import tool documentation\nHere is example of the import tool with the SET files selected and the destination folder set to the ‘import’ folder in your project folder:\n\n\n\nReady to Import!\n\n\nAfter you have selected the SET files and the destination folder, click the ‘Import to SET’ button to copy the files over. You will notice in the terminal window that each file will be loaded into EEGLAB and a channel montage graphic will be exported to confirm channel locations.\nDetails regarding the import will be in the command window:\n\n\n\nImport Details\n\n\nFollowing the import, you should see the SET files in the ‘import’ folder:\n\n\n\nContents of Import Folder\n\n\n\nReturn to the SignalFlow Application and fill in any Project Details you would like to include. These details will be included in the analysis report.\n\n\n\n\nProject Details\n\n\n\nNext move to the Builder tab to start our analysis workflow.\nFrom the inflow modules select “Import SET” From the outflow modules select “Calculate Rest Power”\nConfirm the module outflow path where the power results will be saved. In this example, we will save the results to the ‘results’ folder in our project folder.\nSwitch to the Execute Tab and click the “Execute (Loop)” Button to import each SET file sequentially and calculate the power. The results will be stored in table format in the ‘results’ folder."
  },
  {
    "objectID": "book/murine-eeg/mouseeeg-tutorial.html#sec-customizebands",
    "href": "book/murine-eeg/mouseeeg-tutorial.html#sec-customizebands",
    "title": "8  Mouse EEG Tutorial",
    "section": "8.3 Optional: Customize Power Bands",
    "text": "8.3 Optional: Customize Power Bands\nPublished mouse EEG bands differ in exact frequencies from human EEG bands. You can customize the power bands by making a copy of the ‘Calculate Rest Power’ module and editing the ‘Power Bands’ parameter.\n\nTo start, go back to the setup tab. In your file system, create a new results folder called “results_custombands” to distinguish it from your other results folder.\nNext, in the Setup tab select “Add Custom Folder” and select the “results_custombands” folder you just created. Add a easy to remember tag so you can identify it later.\n\n\n\n\nAdding a custom folder\n\n\n\nSwitch to the Builder tab. Click on “Calculate Rest Power” and press the “Delete Module” Button. This will remove the default power module.\nFind “Calculate Rest Power” in the outflow modules and click on “Copy and Edit Module”. This will create a copy of the power module that you can edit.\nThe MATLAB editor will open up with a copy of the power module. Here the parameters can be clearly seen, including the power band definitions.\n\n\n\n\nPower Band Definitions\n\n\n\nLet’s edit the power band definitions based on Jonak et al. 2020: “Power was then further binned into standard frequency bands: Delta (1–4 Hz), Theta (4–10 Hz), Alpha (10–13 Hz), Beta (13–30 Hz), and Gamma was divided into “Low Gamma” (30–55 Hz), and “High Gamma” (65–100 Hz).”\n\n\n\n\nModified bands based on Jonak et al.\n\n\nSave and close the editor and return to the SignalFlow application.\n\nLet’s activate our new power module with custom bands. There are several steps to do this. \n\nStep 1. Click on Refresh to user modules. This will load the new custom power module.\nStep 2. Next, select the new module and add it to the pipeline builder by clicking on Add Module.\nStep 3. Select the new power module so we can add a custom name.\nStep 4. Add a custom name to the module that is more descriptive.\nStep 5. Select the new output folder for the power results and select “Update”.\n\nNow return to the builder tab and click on the “Execute (Loop)” button to run the analysis. The results will be stored in the ‘results_custombands’ folder."
  },
  {
    "objectID": "book/murine-eeg/mouseeeg-tutorial.html#sec-connectivity",
    "href": "book/murine-eeg/mouseeeg-tutorial.html#sec-connectivity",
    "title": "8  Mouse EEG Tutorial",
    "section": "8.4 Calculating Connectivity",
    "text": "8.4 Calculating Connectivity\nThe vHTP function eeg_htpGraphPhaseBcm (Brain connectivity matrix) is a comprehensive function that conducts phase-based connectivity analysis on an EEG dataset. It calculates several common phase-based connectivity measures like DWPLI, IPSC, etc between all pairs of EEG channels.\nIt takes the input EEG data, which is expected to be epoched into trials. It loops through all channel pairs, extracts the signal for those pairs, and calculates the connectivity measures over a range of frequencies.\nThe output is the connectivity matrices for each measure and frequency, as well as graph theory measures calculated on the connectivity matrices.\nLet’s run a custom version of this connectivity function to calculate only gamma connectivity and perform the operation on parallel processing to speed it up.\n\nYou can start right at the builder tab. Remove the power module but keep the import SET module.\nFind the “Calculate Connectivity” module and click on “Copy and Edit Module”. This will create a copy of the connectivity module that you can edit.\nAdjust the bands to only include gamma bands. If you do not have a GPU, change the gpuOn parameter to 0. If you do have a GPU, you can leave it at 1.\nThis time we will also edit the fname to change the module name in list boxes. This is optional but can be helpful to distinguish between different connectivity modules.\n\n\n\n\nCustom Module Name\n\n\n\nSave and close the editor and return to the SignalFlow application.\nAt this point, you could update the description and pick an alternative results folder. Make sure to press “Update” to save your changes.\nNow return to the execute tab and click on the “Execute (Parallel)” button to run the analysis. The results will be stored in the ‘results’ folder."
  },
  {
    "objectID": "book/murine-eeg/mouseeeg-tutorial.html#sec-summary",
    "href": "book/murine-eeg/mouseeeg-tutorial.html#sec-summary",
    "title": "8  Mouse EEG Tutorial",
    "section": "8.5 Summary:",
    "text": "8.5 Summary:\nIn this tutorial, we have shown how to use SignalFlowEEG to analyze mouse EEG data. We have shown how to import SET files, calculate spectral power, and calculate connectivity.\nThe raw data files containing the values of the results can be opened across most statistical software including MATLAB.\nWe will next work on loading and visualizing this data in R."
  }
]